# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 5.0.x
    performMultiLevelLookup: true
    includePreviewVersions: true # Required for preview versions

#restore will also restore the NuGet packages.
# 'BuildConfiguration' is an internal recreated variable?

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'my-vsts-feed' # A series of numbers and letters


- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: --configuration $(buildConfiguration)' --collect "Code Coverage"


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/*/coburtura/coverage.xml'

- task: SonarCloudAnalyze@1
  displayName: run code analysis

- task: SonarCloudPublish@1
  displayName: publish code analysis

# - task: DotNetCoreCLI@2
#   displayName: 'dotnet publish and zip'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     zipAfterPublish: true











# - task: SonarCloudPrepare@1
#   inputs:
#     SonarCloud: 'batch12142020'
#     organization: 'batch12142020'
#     scannerMode: 'MSBuild'
#     projectKey: 'batch12142020_12142020PipeLineDemo'
#     projectName: '12142020PipeLineDemo'


# do this after your tests have run
# - script: dotnet test ./12142020_MvcRpsDemo.sln --logger trx
# - task: PublishTestResults@2
#   condition: succeededOrFailed()
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'



















