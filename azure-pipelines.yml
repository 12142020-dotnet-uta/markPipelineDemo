# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'batch12142020'
    organization: 'batch12142020'
    scannerMode: 'MSBuild'
    projectKey: 'bab7310717959427ff06cf0768ff6f93fb0c21d2'
    projectName: '12142020PipeLineDemo'
    extraProperties: |
        sonar.exclusions=**/lib/**

- script: dotnet build ./12142020_MvcRpsDemo --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: 'test'
    projects: './12142020_MvcRpsDemo.Tests/12142020_MvcRpsDemo.Tests.csproj'
    arguments: --configuration $(buildConfiguration) --collect "Code Coverage"

- task: PublishCodeCoverageResults@1
  displayName: publish code coverage
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/*/coburtura/coverage.xml'

- task: SonarCloudAnalyze@1
  displayName: run code analysis

- task: SonarCloudPublish@1
  displayName: run publish sonarCloud
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish and zip'
  inputs:
    command: 'publish'
    publishWebProjects: true
    zipAfterPublish: true

- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
    appType: 'webApp'
    WebAppName: 'pipelineDemo11'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'











